*************************************************************************
*	BDS C for ZCPR34 !!!					  	*
*									*
*	Leor Zolman			Version Z2.0	9/24/89		*
*	BD Software							*
*	42 Fresh Pond Place						*
*	Cambridge, Ma. 02138						*
*	(617) 576-3828							*
*************************************************************************

THIS DOCUMENT UPDATED FOR VERSION Z2.0
==== ======== ======= === ======= ====

(See UPDATE.DOC for changes since Z1.x)


The BDS C distribution package is in two parts.  Part one is a plain vanilla
BDS C v1.6 CP/M distribution package, fully compatible with any CP/M machine.

Part two is the ZCPR3 update disk, containing new versions of several files
that know how to take advantage of ZCPR3 features.  Also on this disk are the
remaining "core BDS C" files, so that all you really need to do to get
started is copy the files from this one disk into a clean directory, run
CCONFIG.COM (optional) to configure the compiler and linker to your liking,
and begin compiling.

    CONFIGURATION NOTES (Using CCONFIG.COM):

 	The most useful configuration feature, the default drive/user
	area parameters, should be used. If you pick a currently
	unused drive/user area on your system to be the default
	drive/user area for the BDS C package, then you may place
	all the system files there and do your development work in a
	clean directory elsewhere.  After you configure your default
	drive/user with CCONFIG.COM, copy the following files into
	the default area you have designated:

		CC2.COM, C.CCC, DEFF.CRL, DEFF2.CRL, STDIO.H,
		BDS.LIB.

	Copy the following files into your system command area:
		CC.COM, CLINK.COM, CLIB.COM
			
	(For convenience, I usually rename CLINK.COM to L.COM,
	 but don't do this until AFTER you run CCONFIG.COM)


	SUBMIT File erasure: When the "erase submit files on error"
	configuration option is enabled, any $$$.SUB file in action
	is deleted from the drive specified.  In the standard CP/M
	version, the $$$.SUB file was presumed to reside in the cur-
	rently logged user area. With the new version, user 0 is 
	always used (even when running under vanilla CP/M.)


MORE DETAILS
---- -------

The following "core" files should be taken from the ZCPR3 update disk in order
for the system to work correctly under ZCPR3:

	C.CCC		- 	the run-time package binary module
	CLINK.COM	-	the C linker
	L2.COM		-	the extended linker
	DEFF2.CRL	-	the assembly-coded portion of the library
	CC.COM, CC2.COM -	the compiler
	
For generation of Z-System type-3 programs, you should also take the
following files:

	C-8.CCC		-	run-time binary module with org 8000H
	L2-8.COM	-	L2 linker with changed defaults
	DEFF-8.CRL	-	C-coded libraries for 8000H
	DEFF2-8.CRL	-	assembly-coded libraries for 8000H

The other "core" files (DEFF.CRL, STDIO.H) are absolutely untouched
from the standard distribution versions.  There were no changes
necessary in the C-coded portion of the library (object in DEFF.CRL)
in order to make it hum under ZCPR3.  The run-time package (binary is
C.CCC, source is CCC.ASM) and machine-code portion of the library
(DEFF2x.CSM) were extensively modified; this is where the low-level
file handling is performed.

===========================================================================
BECAUSE OF THE SPECIAL REQUIREMENTS OF Z-SYSTEM RUN-TIME PACKAGE, THE LINKER
IS NO LONGER ABLE TO MIX .CRL FILES THAT WERE GENERATED BY THE NON-ZCPR3
PACKAGE WITH .CRL FILES GENERATED BY VERSION Z2.X OF THE COMPILER.

Make sure to re-compile all source files linked with vZ2.x components.

Do not try to run the utility NOBOOT from the standard CP/M version.  It
will not work!  In the Z version, control over program termination has been
greatly simplified.  The byte at address 111H in the compiled and linked
COM file can be patched (e.g., using ZPATCH).  A value of zero will make the
program terminate in a warm boot; a nonzero value will cause it to protect
the command processor and terminate with a simple, fast return.  You can
easily write your own C program to perform this patching -- it would be a
good exercise!

NOTE THAT .COM FILES GENERATED WILL STILL RUN ON ANY SYSTEM, CP/M OR ZCPR3
===========================================================================

USEFUL FEATURE: programs compiled under this new ZCPR3 configuration
WILL RUN JUST FINE under normal CP/M, no problem (at least, no known bugs
YET).

The -N CLINK/L2 option (which makes it so a program will return to the
CCP after execution, without warm-booting, thus having a little less
memory to play with of course) also works just fine under BOTH CP/M
and ZCPR3 automatically.

The start-up code checks pretty exhaustively for whether we're
running under Z-System, and sets stuff up accordingly.  If under Z-
System, many useful values are copied from the environment area into
a scratchpad RAM area in the run-time package, so that they're
accessible directly by run-time package routines.  Because all these
locations are included in the BDS.LIB global CSM include file, you
too can access them directly via your CSM-coded assembly language
functions.

Error flagging: CC.COM, CC2.COM, and CLINK.COM all set the ZCPR3 error
byte to FF if there was an error, or reset it to 0 if there was no
error.  This means you can use the "IF ERROR" command processor
statement to check for correct compilation/linkage. In the future,
more detailed numbers will be provided, e.g., an error value of 1 when
a file couldn't be found as opposed to a source file compile error.
For right now, it's simply error or no error.


FILE I/O
---- ---

The main point of creating a ZCPR3-compatible version of BDS C was to
incorporate Z-System file handling intelligence into the BDS C
run-time environment. This has been done to a seemingly exhaustive
degree, with a price in run-time overhead of about 800 bytes when
doing file I/O.

The original BDS C file handling routines recognized file names
of the format:
		[u/][d:]filename.typ

The Z-System run-time package file handling routines recognize:

		[d][u]:filename.typ
  	(and)	[dir:]filename.typ

In accordance with Jay Sage's current security protocol, the
maxdrv/maxusr environment variables are recognized, and password
checking is NEVER performed when the requested drive/user is within
maxdrv/maxusr range, when the wheel byte is ON, or when the requested
drive/user is the CURRENT drive/user.

The drive vector table is also recognized (if ENV type is >= 80H).

At startup time, password checking is in effect for all filename
operations (i.e., calls to FOPEN and OPEN and ZSETFCB).
Password checking may be turned on/off, and custom password input
routines specified, by calling the PWDMODE function (details
below).

If you intend to write programs to be run on a restricted access
system (where password checking would be in effect), then you must
turn password checking OFF when processing either of the first two
parameters on the program command line as filenames.  This is because
the ZCPR3 command processor will already have asked for passwords if
it was necessary.  Turn password checking back ON for all remaining
command line parameters, and for all filenames obtained from sources
other than the command line. 

NOTE:		The run-time package checks to see if the program is
		running under ZCPR3, and if it isn't, then all ZCPR3-
		specific stuff (passwords, NDR's, etc.) is disabled.
		Thus, a program should be able to run under either CP/M
		or ZCPR3 with no modifications necessary.

ANOTHER	NOTE:	The DU: prefix recognition system is in effect under CP/M,
		and supersedes the old U/D: format.  I.e., programs linked
		with the ZCPR3 version of C.CCC will recognize "DU:" but not
		"U/D:", while programs linked with the standard
		distribution version of C.CCC will recognize only
		"U/D:" and not named directories.

In the event of security violations (attempting to access a
password-protected directory without knowing the password, attempting
to access a drive/user out of range of maxdrv/maxusr, etc.), the
ERRNO() routine will return a new error code of 15 (while the
directly called functions, FOPEN or OPEN, etc., still returns its
standard error condition code, being NULL or -1, respectively).



ASSEMBLY LANGUAGE INTERFACE
-------- -------- ---------

I use the CASM processor for assembly-language function development,
but it is 8080-specific (designed to be used with ASM.COM or M80.COM
in 8080 mode).  The procedure to process a CSM file into a CRL file is
outlined in the CASM.SUB batch file.  Try it on DEFF2A.CSM and
DEFF2B.CSM if you want to see it in action.  As an example of
combining CRL files into a library (using CLIB), the NDEFF2.SUB file
is provided. It takes DEFF2A.CRL, DEFF2B.CRL, and DEFF2C.CRL (each
created using CASM.SUB) and combines them into DEFF2.CRL.  Save your
original DEFF2.CRL if you decide to play with these, in case you have
problems.  (Note: DEFF2D.CSM, the long integer function, is not automatically
combined into DEFF2.CRL by NDEFF2.SUB because I never use it.  You may
certainly add it, if you want.)

Library breakdown:

	DEFF2A.CSM -- General-purpose routines
	DEFF2B.CSM -- Most file I/O functions
	DEFF2C.CSM -- The FCB initialization routines, called by many
			functions in DEFF2B.CSM. All security checking
			is done in the _setfcb function.
	DEFF2D.CSM -- The long integer package workhorse function

I am enclosing the ZCASM package, also. This is a contributed
Z80-specific modified version of CASM.  I have not used it much, so
you're on your own with it.  I'd appreciate a version checked out with
whatever Z80 assembler is most popular these days.  NOTE: All assemblies
for this package were performed with CASM, not ZCASM.


NEW FUNCTIONS:
--- ----------

	zenv() 		returns the address of the environment block.

	topofmem() 	returns the effective top of memory (not new,
			just modified for ZCPR3)

	errmsg() 	recognizes error 15 as a password error (new)

	pwdmode(n)	turns password checking on/off, and allows the
	int n;		specification of a custom password-reading
			function.

			By default, passwords are checked when
			appropriate (when a desired dir is out
			of maxdrv/maxusr range AND wheel is
			off AND the dir is not the current
			dir).  Use pwdmode(0) to NEVER check
			passwords.  Also, if you DO want pass-
			words checked, use pwdmode(0) when
			processing either argv[1] or argv[2],
			because ZCPR3 has already asked for
			passwords if necessary!  Turn password
			checking back on with pwdmode(1) for
			argv[3] and up, since the system has
			NOT checked THOSE command line items
			yet.

	pwdmode(2, pwfn)
	int n;	
	char *(*pwfn)();

			Special form of pwdmode():  If the first
			parameter is 2, then a second parameter
			specifies the address of a user-supplied
			function (it can be written in C, of
			course!) that asks for passwords and returns
			a pointer to the password typed by the
			user.  The form of the user-supplied function
			should be:
				char *pwfn(dirname)
				char *dirname;

			It accepts the name of the directory, and
			returns a pointer to the password entered
			by the user.  This gives you complete control
			over accepting passwords from the user.
			(For an example, see PASSWD.C)

	zsetfcb()	Like the old setfcb() function, except a 3rd
			parameter, a pointer to an int, is
			required.  The effective user number
			of the filename is returned through
			the pointer, as well as being stuffed
			in the fcb at the appropriate place.

			Format:

			int zsetfcb(fcbp, filename, usernum)
			struct fcb *fcbp;
			char *filename;
			int *usernum;	/* user number ptr */

			fcbp is a pointer to an fcb structure,
				33 bytes long
			filename is the text to parse
			usernum is the address of an int where
				the user number will be placed

			Returns ERROR (-1) if filename is
			illegal for some reason (security
			violation, etc.)
			else 0 if OK.


Generating ZCPR3 Type 3 Programs:
---------------------------------

Z3 Header information is now present at the start of generated COM
files.  Normal (org 100h) programs always have an environment type of 1.
Type 3 programs having origin at an arbitrary address may be created,
but this requires creating a customized run-time environment (run-time
package and DEFF*.CRL libraries) configured for the new origin address.

These are provided in the package for a load address of 8000H.  The
run-time library is called C-8.CCC, and the two default libraries are
called DEFF-8.CRL and DEFF2-8.CRL.  A special version of the L2 linker
(L2-8.COM) has been provided which will automatically install C-8.CCC
and scan the org-8000 libraries.  The files must be located in a directory
with the name BDSC:.  No "-ORG 8000" option is required; 8000H is the default
load address for L2-8.

The following sequence must be followed (make copies of all
relevant files and do this work in an area SEPARATE from where the
files for the normal environment are kept!  The files that will be
modified are: CCC.ASM, C.CCC, DEFF2x.CSM, BDS.LIB, DEFF2.CRL, DEFF.CRL).

1. Modify the run-time package source (CCC.ASM) by specifying a new
origin address as the value of the EQU for "CCCORG:" near the beginning
of the code.  Then re-assemble CCC.ASM, yielding CCC.HEX.  Then use MLOAD
(available from remote access systems and public-domain software suppliers)
to convert the HEX file into CCC.COM.  Rename that file to C.CCC.  (You can,
with some difficulty, also use SID or DDT to read CCC.HEX into memory with
the appropriate offset so that it ends up at location 100h, from which the
code can be written to file C.CCC using SAVE.)  See the instructions in the
beginning of CCC.ASM for further suggestions and instructions.

If (and only if) you have made internal changes to the structure of CCC.ASM,
you will have to examine your assembly listing to see the new value of the
symbol RAM.  (If you used ASM or MAC to perform the assembly, then the last
number displayed on the console before END OF ASSEMBLY is this new RAM
value.)  In most cases, you will not need this value.

2. In BDS.LIB, insert the new value for the load address into the definition
of the symbol CCCORG near the beginning of the code.  If you have changed the
structure of the code in CCC.ASM, you will also have to change the value of
the equate for RAMOFF to make the value of RAM ( = CCCORG + RAMOFF ) agree
with the value determined from the assembly listing for CCC.ASM.  This will
generally not be necessary.

3. The machine-coded library must be re-CASM-ed (DEFF2x.CSM) and a
special version of DEFF2.CRL created for use with the custom origin
address.  The SUBMIT file ASMDEFF2.SUB has been provided to take you
through the entire process of CASM-ing, ASM-ing, CLOAD-ing, and CLIB-ing
all three DEFF2x.CSM files to create a new DEFF2.CRL.
 
4. The C-coded portion of the library (STDLIB*.C) must now be
recompiled for the new origin address (the submit file NEWDEFF.SUB
has been provided, for use with EX.COM or ZEX.COM).  If the new origin
address was, say, 2100h, then use this as parameter to the -M CC
option and recompile STDLIB1.C, STDLIB2.C, and STDLIB3.C.  Then combine
the resulting .CRL files into a new DEFF.CRL.

The script TYP3BDS.ZEX is a ZEX5 script that Jay Sage uses to automate
the entire process of generating all the files needed.  If you have
different assemblers, editors, etc., you will have to adapt the script.
In any case, the script does chronicle the complete sequence of steps.

5. When compiling your application programs for the custom origin,
make sure to specify the -M <addr> option to CC, with <addr> being
the customized origin address.

6. When linking programs with CLINK, use the -L option to specify the
new origin address.  When using L2, use the -ORG option (or use L2-8).
Both linkers have been updated to check consistency between the origin
address in C.CCC and the one specified on the command line; if the two
do not match, the linkage will be aborted.


SAMPLE PROGRAMS
------ --------

I have rewritten a bunch of stuff for ZCPR3.  It was a pleasure, since
it mostly involved yanking out code.

CP.C -- my favorite copy utility.  TRY it, you'll LIKE it!  It allows stuff
	like:
		cp foo dir:bar zot a.c *.bak bakup:

Nifty, eh?  Especially with its wildcard expansion!  That was the trickiest
conversion, getting wildexp.c to work.  And I still haven't taught it to
recognize "dir:" during expansions, but that's mostly because I'm out of
time to be playing with this any more this week.  If you beat me to it,
power to you...just send me a copy before I reinvent that wheel!

NDI.C -	simple binary file comparator.  Great for making sure two files
	are still the same (or still NOT the same...)
	BEEFED UP, NOW ABOUT 10 TIMES FASTER THAN DI.C, USING RAW I/O.

TEST.C -- prints out some ZCPR3 parameters, the NDR, etc.  This was the
	initial test program, so it starts simple (printf("hello..."))
	and gets more complicated from there.

ECH.C -- just echoes command line args.  Useful for testing WILDEXP.C.

WILDEXP.C -- Wild card expansion.  Even recognizes wildcard user numbers
	(oops, I forgot to TEST that feature under ZCPR3...you may
	get a surprise using that one!)

TAIL.C -- The venerable print-the-tail-end-of-a-text-file program.  Sure
	beats scanning to the end of a 100K file with your text
	editor!  Use: tail -100 foo.bar (prints the last 100 lines of 
	foo.bar on the console).

OK, I think that's all the ones I've played with.


THINGS I HAVEN'T DONE YET
------ - ------- ---- ---

CDB and RED haven't even been touched.  If anyone wants to tackle testing
these out under Z-System, please do!  I'll be glad to coordinate, so let
me know what you want to do, and I'll make sure anyone else who asks gets
told who's already doing it...

Many of the utility source programs included with the package have some
compilation/linkage instructions specifying an absolute -e address for
externals.  This address was derived assuming the standard CP/M version of 
the run-time package was in use; under ZCPR3, with the runtime package being
larger, these address will be too small.  To calculate the optimum -e address
for any particular application, compile it once using -e0 just to find out
the size of the resulting code (the linker should warn you that the externals
overlap code, so of course don't try to run this output!).  Use the last
code address + 1 (or add a few hundred bytes or so, in case you make future
changes) and use the new number as the -e value in a second compilation.

                                                                                                                              