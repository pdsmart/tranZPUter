



                                     PILOT/P

                    Implementing a High-Level Language in a Hurry
                                  by David Mundie

                    Documentation by Raymond E. Penley, Feb 26, 1984





With PILOT/P one has the features of the languages Pascal and PILOT. PILOT/P
is a PILOT to Pascal translator.  It was originally written for the UCSD Pascal
language but has since been rewritten to use the Pascal/Z compiler by Ithaca
Intersystems.  Pascal/Z has all the standard Pascal constructs plus the ability
to chain to another program, thereby increasing the flexibility of the PILOT
langugae.

The experienced Pascal programmer may add additional variables, functions,
real numbers, and procedures by modifying the file "PILOT.HDR".

The program has been modified to conform, as much as possible, to standard
PILOT syntax since its original publication in the July 1980 issue of BYTE.

To compile the PILOT/P program SAMPLE1.PLT residing on the diskette in
drive B, execute the PILOT/P submit program:

	A>DO PILOT/P SAMPLE1 B

Programs that utilize the program linking statement must be compiled using
the CHAIN submit program instead of the PILOT/P submit program.

Let us assume that these PILOT/P programs are a complete lesson and that
they are all on the diskette in drive unit B.

    LESSON.PLT, LMENU.PLT, LESSON1.PLT, LESSON2.PLT, and LESSON3.PLT

Then the following commands will compile and link all the progrms:

	A>DO /
	*DO CHAIN LESSON B
	*DO CHAIN MENU B
	*DO CHAIN LESSON1 B
	*DO CHAIN LESSON2 B
	*DO CHAIN LESSON3 B
	*<return>

(The order in which they are done is not important.)
When completed all the required programs will be on drive B.

Recommended placement of programs on a 2 drive system:

DRIVE A				DRIVE B
------------			-----------------
PILOT/P.COM			PILOT/P programs.
PILOT/P.SUB			SAMPLE1.PLT		-PROGRAMS CAN BE
PILOT/P.HDR						 ON DRIVE A IF ROOM.
DO.COM		-Supersub renamed.
PASCAL.COM
MAIN.SRC
ASMBL.COM
LINK.COM
ASL.REL		-A Small Library (Pascal/Z User's Group)
CHAIN.REL
CHAIN.SUB
LIB.REL
EDITOR.COM	-YOUR FAVORITE EDITOR
PIP.COM
STAT.COM


------------------------------------------------------------------------------
			PILOT/P INSTRUCTIONS
------------------------------------------------------------------------------


			TYPE  (T:)

SYNTAX:
------------------------------------------------------------------------------
  T [<cond>] : <message>
  T [<cond>] : <message> ;
------------------------------------------------------------------------------

DESCRIPTION: Displays a message to the PILOT user. A message can consist of
a literal character string, string variables and numeric variables. All char-
acter positions to the right of the colon are reproduced in a literal
fashion with the execption that the values of variables are inserted as
replacements for their names. String variable names are identified by
beginning with "$" and numeric variable names by beginning with "#".
Variables may be displayed if their names are enclosed by at-signs "@".
The second form of the TYPE statement will print the message and hold the
cursor immediately following the last character on the same line.

LIMITATIONS: Never print a string variable that has not been defined by a
previous assignment. The results are unpredictable and usually disasterous.
The length of a TYPE statement is limited to 78 characters, including the 'T'
and ':'.

EXAMPLE:
------------------------------------------------------------------------------
	 T: WELCOME TO PILOT.
	 T: PLEASE TELL ME YOUR NAME.
	 A: $N
	TN: HI THERE @$N@, I HOPE YOU HAVE A NICE TIME.
	 C: #X := #X + 1
	 T: YOUR NEW SCORE IS @#X@.
	 T: YOUR NEW SCORE IS @#X:4@.  <NOTE: Pascal formatting option>
T: This is a very long type statement. And we are going to reach the limit >>|
	T: These two type statements;
	T: will print on one line.
------------------------------------------------------------------------------


			ACCEPT  (A:)

SYNTAX:
------------------------------------------------------------------------------
  A [<cond>] :
  A [<cond>] : #<numeric variable>
  A [<cond>] : $<string variable>
------------------------------------------------------------------------------

DESCRIPTION: Opens the console device for the PILOT user to enter a response.
Line editing follows standard CP/M 2.2 line editing.  The line terminates
when carriage return is entered. The blank accept statment actually stores
the user input in the system variable "ans". The system variable may be used
at any time in the program.

LIMITATIONS: Numeric variables and string variables may be any one of the 26
single letters of the alphabet: a..z.
		#a,#b,#c, ...,#z.
		$a,$b,$c, ...,$z.

Upper and lower case letters are considered the same variable.  The length of
a response is limited to 80 characters. A numeric variable response may be
+-32767.

EXAMPLE:
------------------------------------------------------------------------------
	T:WHO ARE YOU?
	A:
	.....
	T:WHAT IS YOUR NAME?
	A:$N
	.....
	T:WHAT IS YOUR AGE?
	A:#X
	.....
------------------------------------------------------------------------------


			MATCH (M:)

SYNTAX
------------------------------------------------------------------------------
 M  [<cond>] : <pattern>[!<pattern>...!<pattern>]
 M  [<cond>] : @string variable@
------------------------------------------------------------------------------

DESCRIPTION: Causes a scan of the last user response, the one received by the
last ACCEPT (A:) statement. Patterns in the expression field of the MATCH
statement are compared with the last response. Any item which matches causes
the YN-switch to be set true. Patterns in the list are separated by commas,
with leading or trailing blanks considered part of the pattern. A comma
which terminates the last item is ignored but can serve to indicate the
presence of a trailing blank.  A moving window scan of the response with
each pattern occurs until either a match is found or the input is exhausted.

LIMITATIONS: The match statement does no case translations. The length of
the arguments on the command line is limited to 62 characters max.
   M:<------------------- 62 CHARACTERS MAX ---------------------->
   M:Washington!Baltimore!California!Tennessee!Mississippi!Maryland

EXAMPLE:
------------------------------------------------------------------------------
	M:A!B!C
		Matches A or B or HAT or ALICE or JOB
	M: A! B! C
		Matches A or B or ALICE
		Does not match JOB or HAT.
	M: A ! B ! C !
		Matches only A or B or C
	M: A! B! C! a! b! c
		Matches upper and lower case.
	M:@$a@
		Matches the contents of the string variable $a
------------------------------------------------------------------------------


			JUMP (J:)

SYNTAX:
------------------------------------------------------------------------------
 J [<cond>] : <destination>
------------------------------------------------------------------------------

DESCRIPTION: Jumps to the specified destination in the current program. The
destination must reference an existing label. The label may come before or
after the jump statement.

LIMITATIONS: A Label statement must be the only statement on a line. The
PILOT/P translator does not check to see that you are jumping to a real
label, also it does not know if you jump to a label that does not exist
anywhere in the program. (A two pass translator would be required to do
that.)

EXAMPLE:
------------------------------------------------------------------------------
	*START
		J:*MORE
		.....
		.....
	*MORE
		T:ARE YOU READY TO BEGIN?
		A:
		M:YES
		JY:*AGAIN
		JN:*START
		.....
	*AGAIN
		T:I HAVE A QUESTION FOR YOU.
		.....
------------------------------------------------------------------------------


		SUBROUTINE (PROCEDURES)  (%:)

SYNTAX:
------------------------------------------------------------------------------
 % : <procedure heading>
------------------------------------------------------------------------------

DESCRIPTION: Identifies and delimits subroutines. The statement '%:' is
followed by the subroutine name.

LIMITATIONS: Procedures must be declared before the main program body.

EXAMPLE:
------------------------------------------------------------------------------
	%: getchoice(var #c:integer)		-- procedure starts
	R: accepts a number and checks its value
	C: REPEAT writeln
	T: What is your choice(1 to 10)?;
	A: #c
	X: #c in [1..10]
	TN: @#c:4@,@chr(7)@ is out of range
	C: UNTIL flag
	E:					-- procedure ends
------------------------------------------------------------------------------


		USE A SUBROUTINE (U:)

SYNTAX:
------------------------------------------------------------------------------
  U [<cond>]: : <A declared subroutine>
------------------------------------------------------------------------------

DESCRIPTION: Calls the specified procedure in the current program.

LIMITATIONS: Only those limitations imposed by your Pascal compiler. Also
see the above instructions on subroutines.

EXAMPLE:
------------------------------------------------------------------------------
		%:INSTRUCTIONS
		T:THE FOLLOWING INSTRUCTIONS APPLY
		.....
		E:
	*START
		T:THIS IS WHERE WE START
		T:DO YOU NEED INSTRUCTIONS?;
		A:
		M:YES
		UY:INSTRUCTIONS
		.....
------------------------------------------------------------------------------


	END OF SUBROUTINE OR PROGRAM  (E:)


SYNTAX:
------------------------------------------------------------------------------
  E [<cond>] :
------------------------------------------------------------------------------

DESCRIPTION: Indicates the end of a subroutine or the end of the current
program.

EXAMPLE:
------------------------------------------------------------------------------
		%:skip(#x:integer)
		C:for #i:=1 to #x do writeln
		E:
		.....
		T:If you'd like to do more with the abstract and
		 :concrete, try CLOVE.  Bye for now, @$n@.
		E:
		.....
	*QUIT
		T: O.K. @$n@
		T: Try SAGE again if you like.
		E:
------------------------------------------------------------------------------


			COMPUTE  (C:)

SYNTAX:
------------------------------------------------------------------------------
 C [<cond>] : <num variable> := <num expression>
 C [<cond>] : <any legal Pascal statement or expression>
------------------------------------------------------------------------------

DESCRIPTION: Computes a value based on evaluation of the numeric
expression and assigns the result to the numeric variable on the left of
the assignment operator. You may use any legal Pascal expression.  All
statements are terminated with a semi-colon and the assignment operator
is the ":=".

LIMITATIONS: Numeric variable names are the alpha letters A..Z,a..z.
Longer names may not be written unless they are predefined in the file
'PILOT.HDR'.

EXAMPLE:
------------------------------------------------------------------------------
		C:FOR #i:=1 to 100 DO writeln(#i:5)
		C: #X := #X + 5
		C: #X := (#A+5) DIV 15
		C: $s := 'SUNDAY MONDAY TUESDAY WEDENSDAY'
------------------------------------------------------------------------------


			REMARK  (R:)

SYNTAX:
------------------------------------------------------------------------------
 R : <text>
------------------------------------------------------------------------------

DESCRIPTION: PILOT/P ignores the REMARK statement and blank lines.. It is a
means of storing potentially useful information in the program listing. The
REMARK statement may occur at any point in a PILOT/P program.

EXAMPLE:
------------------------------------------------------------------------------
		 R:--------------------------------
		 R:LESSON TWO: DATE WRITTEN: 1/2/84
		 R:--------------------------------
------------------------------------------------------------------------------


		PROGRAM LINKING  (L:)

SYNTAX:
------------------------------------------------------------------------------
  L [<cond>] : <ANOTHER PILOT/P PROGRAM>
------------------------------------------------------------------------------

DESCRIPTION: Links to another PILOT/P program.

LIMITATIONS: Must follow the rules in the Pascal/Z manual concerning
chaining programs. Program name must be from 1 to 8 characters only.

EXAMPLE:
------------------------------------------------------------------------------
		L:LESSON1
------------------------------------------------------------------------------


		WAIT STATEMENT  (W:)

SYNTAX:
------------------------------------------------------------------------------
  W [<cond>] : n
  W [<cond>] : #<numeric variable>
------------------------------------------------------------------------------

DESCRIPTION: Pauses the specified number of seconds or until any key is
pressed, whichever comes first. The system variable 'ch' contains the key
pressed or if no key was pressed within the specified time period the value
returned is the null (0) character.

EXAMPLE:
------------------------------------------------------------------------------
		 W:5
		 X: ch = chr(0)
		TY:You must select one of the above, try again.
		JY:*AGAIN
		 M:Q!q
------------------------------------------------------------------------------


		BOOLEAN EXPRESSION  (X:)

SYNTAX:
------------------------------------------------------------------------------
 X [<cond>] : <ANY legal Pascal boolean expression>
------------------------------------------------------------------------------

DESCRIPTION: Any Pascal boolean expression may be used, whether arithmetic
or not.

EXAMPLE:
------------------------------------------------------------------------------
		X: i < length(ans)
		X: (ans='HOUSE') or (ans='house')
		X: index(ans,'car')<>0
		C: $s := 'SUNDAY MONDAY TUESDAY WEDENSDAY'
		X: index($s,'DAY')<>0
------------------------------------------------------------------------------
