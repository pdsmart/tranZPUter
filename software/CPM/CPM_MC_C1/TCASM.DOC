.sp 2
CAVEAT, or BEWARE THE PRESUMED WONDERFUL, FRIENDLY ASSEMBLER.
.sp
As noted in the description below, every effort has
been made to remove booby-traps from this source code.
I own several assemblers.
None can process this text correctly, e.g. the lower case
problem mentioned below.
Following INTEL standard mnemonics is not a guarantee
that a assembler does not have occasional wierd behavior.
We suggest you approach the use of the source code file
as a "project" of a few evenings wrestling, or in a bad case
a few weeks.
.sp 2
CHANGES FROM APPENDIX A
.sp
The tc.asm file contains the source code for the tiny-c
interpreter, close to what is in Appendix A of the Owner's
Manual.
It differs in these ways:
.sp
.in 5
.ti -4
1.  The eight patches XX through XX8 at the end of
Appendix A have been moved inline.
This means that, when assembled, slightly different
addresses will result.
.sp
.ti -4
2.  All P operands are changed to PSW in PUSH P and POP P
instructions.
.sp
.ti -4
3.  The labels POP and PUSH are changed to POPST and
PUSHST.
The label OUT is changed to BLOUT.
So no labels "collide" with operator mnemonics.
.sp
.ti -4
Some assemblers complain at attempts to put -1 into a byte.
4.  At 2094 the DB -1 is changed to DB 0FFH.
.sp
.ti -4
5.  In the subroutine DREM the locals are renamed
DR2, DR3 and DR4 (locations 2145-2164).
In FACTOR the local WHERE is now FWHERE (2773-2828).
In COLD the local DONE is now DONEMSG (2cd8, 2d00).
Thus no symbols are used twice, and the entire
interpreter can be assembled in one bunch.
.sp
.ti -4
6.  All $+n address are removed, and changed to labels.
This is a big non-standard area; the meaning of $.
It's use is poor practice anyway.
.sp
.ti -4
7.  The comment on line 260d is removed.
My "latest and best" assembler didn't like it.
.sp
.ti -4
8.  These mods to the installation area are compatible
with the CP/M (*) installation code:
ECHO is 1 (not 0).
MSTACK is 1a00 (not 0).
There are addresses for INCH, etc.
The memory address allocations are realistic ones for
a 24K CP/M installation.
.sp
.ti -4
9.  The origin is at 600h.
.sp 2
.in
Assembling tc.asm will give a working tiny-c compatible
with the installation code ctc.asm.
However the listing in Appendix A will not be valid, as
noted above.
To generate a TC.COM from the TC.ASM:
.in 5
.sp
assemble TC.ASM
assemble CTC.ASM
enter DDT
input (and read)TC.HEX
input (and read) CTC.HEX
follow lower case instructions below, if needed.
leave DDT (type ^C).
save 23 segments under any name you want for this version
.ti 5
and with type COM.
the result should work just like the TC.COM file, but
.ti 5
see CAVEAT at the top.
.in
.sp
LOWER CASE PROBLEM
.sp
The standard CP/M 1.4 assembler maps all literals from
lower to upper case.
You may have an assembler that doesn't do this, in
which case skip this step.
Or you may want an upper case version of tiny-c,
in which case you are left with the exercise of
modifying PPS to upper case literals.
But most likely you will have to change these bytes
to undo the unwanted case mapping.
The following addresses are for the new assembled version,
not the Appendix A listings.
.sp
.ti 5
Change all alphabetics (all but the nulls) in
addresses 663 through 2093.
(Note the FF at the end. It signals to stop.)
.sp
Change the four letters 'main' starting at 1326.
.sp
change the x at 1373.
.sp
Change the a at 88e
and at 891 is 'z'+1 which must be changed.
All changes are simple.
.sp
.in
Just add hex 20, i.e. change
leading 4's to 6's and leading 5's to 7's.
After making the changes use the D command to dump
them, and verify your work.
Note that all this can be done using DDT, before leaving
it to do the save.
Incidentally, it only takes 5 minutes or so.
.sp 2
AND NOW, WHY IT ALL DOESN'T WORK.
.sp
The CTC code cheats, by calling a few subroutines
in TC.
To do this it needs to know the subroutine's addresses.
There are several EQU statements in CTC.ASM with addresses
from Appendix A.
These have to be changed to addresses produced by the
reassembly.
These are the EQU's to change:
.in 5
.sp
tcorg
inst
move
hlneg
pzero
