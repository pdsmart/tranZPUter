01DB \ PRINT VIA BDOS\
0113  
0109 \ SEE IF Z80 OR 8080\
010D  
011D \ PUT STACK RIGHT AT OLD BDOS\
0121 \ SAVE PRIMARY REGISTERS\
018A \ SEE IF ANY COMMAND GIVEN - EXIT IF NOT\
018D  
0191 \ IF BLANK - LOOP FOR MORE\
0195 \ IS IT A COLON - LOOP IF NOT\
019A \ IS : FOLLOWED BY =\
01A0 \ POINT TO FIRST DIGIT - SET VALUE TO ZERO\
01A8 \ SEE IF EOL\
01A4 \ IF EOL AT START, EXIT UNDER EOL1
01AD \ CHECK IF DIGIT\
01B1  
01B5  
01BB \ MULTIPLY BY 16 (HEX NUMBER WAS GIVEN)\
01C0 \ FOLD IN NEW LOWER DIGIT AND LOOP\
0103 \ LD HL,XXXX\
0106  
01C5 \ LOUSY VALUE - ADJUST OFFSET(?)\
01CC \ ADD '*' TO SIGNON\
01C8  
01D1 \ DO AGAIN\
01D4 \ IF LOWER VALUE IS 0, IS OK\
01D8 \ BAD VALUE OR OFFSET GIVEN FOR RELOCATE\
01E0  
0185 \ CHECK IF RELOCATE COMMAND GIVEN - PROCESS IT\
0124 \ SEE IF RELOC\
012A \ SIGNON\
013B \ PRINT SIGNON\
013F \ RESTORE PREVIOUS REGISTERS\
0142 \ IF OFFSET IS NON-ZERO - BYP\
0146 \ ELSE SET FOR TOP OF MEMORY\
014E \ BUMP 2K OFF\
0150 \ BUMP 256 BYTES OFF\
0151 \ BUMP 21H PAGES OFF FOR DCON AND SET LOAD ADDRESS\
0155 \ MOVE LOAD ADDRESS INTO DE\
0158 \ MOVE PROGRAM\
0163 \ RESTORE LOAD VALUES\
0165 \ SAVE POSN OFF END OF DCON (DATA AREA?)\
015C  
016B \ REDUCE COUNT BY 1\
016C \ IF NOT MULTIPLE OF 8 - BYPASS\
0166  
0171 \ GET DATA BYTE BEYOND END OF PROGRAM AND RESAVE\
0175 \ PUT INTO L\
0176 \ CHECK BIT IF CORRECTION NEEDED\
017B \ ADJUST BYTE AT THIS LOCATION\
017E  
0167 \ INNER LOOP FOR ADJUSTMENT\
0181 \ NO MORE ADJUST - FIX STACK AND JUMP TO START OF PROGRAM\
0200 \\ ACTUAL DCON WHICH GETS MOVED\(OFFSET FROM 4000 TO 4200)\\
0A3E \ INITIALIZE DEBUGGER\
0A36 \ SAVE STACK VALUE\
0A3B \ EXIT TO BDOS\
0A42 \ SET JUMP ABOVE TO ACTUAL BDOS LOCATION\
0A48 \ SET WARM BOOT FOR BDOS COMMAND\
0A4E \ SET BDOS ADDRESS TO LOCATION 0 (EVERYBODY THROUGH HERE)\
0A64 \ STARTING LOADER AREA\
000D \ LOADING LOCATION OF OTHER PROG\
0002  
0A76 \ SET OUR STACK AND 100H/RETAD1 TO STACK\
0A7E \ SAVE VALUE AT 2 LOCNS BELOW THIS\
0A85  
1673 \ SAVE 4 BYTES FROM LOC4 TO VALHLD\
0A99  
0A96  
0A9F  
0AA5 \ GET VERSION OF CP/M\
16D1 \ CONSOLE OUTPUT ROUTINE\
16D4 \ UPDATE COLUMN COUNTER\
16DB \ RESET COLUMN COUNTER\
16DF  
16E9 \ PRINT 0 TERMINATED STRING IN HL\
172E \ PRINT CR/LF SEQUENCE\
1737 \ GET CONSOLE STATUS\
1717  
171B  
1713 \ PRINT 1 HEX CHAR IN A-REG.\
171F \ PRINT A-REG. AS 2 DIGIT HEX CHAR\
16BC \ GET LINE FROM CP/M INPUT LINE COMMAND\
16CF \ SEND BLANK TO CONSOLE\
26F8 \ IF UPPER CASE, RETURN\
16FB \ ELSE SET LOWER CASE\
16F5 \ SET ZERO FLAG IF <DEL> CHAR\
1702 \ GET SIZE TO A-REG.\
1711 \ RETURN WITH FIRST CHAR\
1708 \ BUMP COUNT DOWN\
1709 \ GET NEXT CHAR\
16F2 \ GET AND PROCESS CHAR (Z=7FH, SET TO UPPER CASE)\
1CAE \ STORE REGISTERS HERE\
1CA8 \ GET STACK VALUE INTO HL (OFFSET)\
1CB5 \ STORE SECONDARY REGISTERS\
1CC4 \ AND IX, IY\
1CC8 \ SET IX TO FLAGS\
1CCC  
177E \ PRINT HL AS 4 DIGIT HEX NUMBER\
17CC \ HL <-- (HL,HL+1)\
017C \ HL <-- (DE,DE+1), DE BUMPED BY 2\
17B6 \ SET Z FLAG IF CR, COMMA, OR SPACE\
1028  
1004 \ PRINT VERSION NUMBER\
1021 \ PRINT DIGIT 0-9\
1033  
0F55 \ PRINT ALL REGS OR 8080 REGS ONLY\
0F62  
0F5F  
0F76  
0F8B  
0F9C  
0FB0  
0F65 \ PRINT PRETRACE OR POSTTRACE\
0F6F  
0F72  
0F52 \ PRINT FORM OF DISPLAY: 8080/Z80 REGS., PRE/POST TRACE\
0AAD \ PRINT VERSION NUMBER\
0AB0 \ PRINT FORM OF DEBUGGING\
0AB3 \ SET JUMP AT RST ADDRESS\
0ABE \ ANY COMMAND GIVEN? - JUMP IF NOT\
1128 \ MOVE SECONDARY FCB INTO OUR AREA\
1130 \ MOVE LOOP FOR FCB2\
1137 \ IS IT A ?\
0AC5  
0B58 \ OPEN NORMAL FILE FCB\
0B14 \ JUMP TABLE OF VECTORS FOR COMMAND\
0B02 \ ONLY LETTERS A-Z ALLOWED\
0B07 \ SET UP JUMP\
0B48 \ SECONDARY FOR 'EM' OR 'EU'\
0B55  
0BCE \ 'CALL' SUBROUTINE\
1A05 \ IF CR OR COMMA, BYPASS\
1A0A  
1856  
185A  
1851 \ GET INDIRECT HL & BUMP COUNT1 (SAVE DE)\
0ACB \ SET STACK & RETURN ADDRESS\
0ACE  
0AD2  
0AD6 \ ANY KEY PRESSED? - FETCH IF WAS\
0ADE \ PRINT CR/LF & PROMPT\
0AE9 \ GET FIRST CHAR FROM INPUT LINE - JUMP IF JUST CR\
0AE6 \ FETCH COMMAND\
0AF5 \ IS FIRST CHAR '-'?\
0AF9 \ SET DASH FLAG\
0AF0 \ RESET DASH FLAG\
0AFA \ GET NEXT CHAR\
0AFD \ PROCESS COMMAND FROM FIRST CHAR\
19FF \ RESET COUNT1 FLAG\
1A0F \ COMMA ENTERED - SET COUNT1 FLAG\
0000 \\ TRUE START OF DCON\\
0003 \ FORMAT BITS\
0004 \ VERSION\
0006  
1865 \ IS IT NEGATIVE?\
1869 \ IS NEGATIVE - JUMP TO THAT SECTION\
186E \ POSITIVE?\
187E \ NOT EITHER - OR +: USE DEHLD AND JUMP AHEAD\
1872 \ IS A +: JUMP AHEAD\
18C6 \ SEE IF PARENTHESIS\
18D0 \ MUST BE PAREN RIGHT\
18CD \ SCAN ...\
1861 \ GET NEXT CHAR AND PROCESS\
1864  
18D5  
18D9 \ TEST FOR PERIOD\
18DE \ TEST FOR ASTERICK\
18E2  
18E5 \ SET DE TO VALUE POINTED TO BY DE\
18EA \ SEE IF EQUAL\
18EE  
18F1 \ FETCH BYTE POINTED TO BY DE\
18F6 \ IS IT APOSTROPHE?\
18FA \ GET CHAR - NOT PROCESSED\
18FD \ NO CTRL ALLOWED\
1902 \ SEE IF END OF QUOTED STRING\
1906 \ END OF QUOTED STRING - GET NEXT CHAR\
1912 \ MOVE IT OVER ('XX' ONLY CREATES A WORD)\
17A1 \ CHECK SPECIAL CHARS BESIDES DELIM\
1909 \ GET ANY CHAR (SHOULD BE DELIM)\
190D \ IF NOT, MUST BE APOSTROPHE\
191A \ HAVE DOLLAR SIGN - GET VALUE INTO DE\
1921 \ GET CHAR - IF DOLLAR SIGN, GET NEXT VALUE\
191D  
1929 \ IF NOT ^, JUMP\
192D \ GET NEXT CHAR\
19B4 \ FOR OTHER COMMANDS - BUT NONE AT THIS TIME\
193E \ JUMP IF NOT #\
1942 \ SEE IF SPECIAL CHAR - JUMP IF SO\
1947 \ GET FLAG AT IX+2 INTO L (SET Z80 FLAGS)\
194E  
1951  
1953  
195B  
1038  
103C  
1040 \ Z-FLAG SET IF (LOC3) = HL\
1052 \ IF FLAG NOT SET, RETURN\
1058 \ ELSE SET Z-FLAG IF LOC3 = 0\
1061 \ P COMMAND\
19D4 \ IF ZERO, SET DE TO -1 AND EXIT\
19D8  
18C3  
19BC  
19ED \ DIVIDE HL BY DE - RESULT IN C, REMAINDER IN HL\
19EF  
19F5  
16B1 \ UNKNOWN COMMAND\
1A4F \ CHECK IF SECOND CHAR IS W\
1A52 \ RESET FLAG\
1A5A \ SET FLAG\
19F7 \ PROCESS SECOND CHAR - CHECK FOR W EXTENT FIRST\
19FC \ GET ADDRESS\
0C37 \ PRINT ADDRESS\
0C3D  
0C42 \ CHECK WORD DISPLAY FLAG\
0C48 \ WORD DISPLAY - SEND 8 BLANKS\
0C4D \ GET VALUE AND PRINT IT\
1793 \ ADJUST L-REG. BY E & SET FLAGS VIA HL - DE\
0C34  
0C60 \ SEND BLANK AND PRINT 2 HEX CHARS\
0C6D \ MORE TO DUMP - SEE IF EOL\
0C72 \ SAVE ADDRESS\
0C75 \ CHECK DASH - DO NOT PRINT ASCII IF DASH PRESENT\
0C7B \ GET BACK ORIGINAL DUMP ADDRESS\
0C7F \ SEND SPACE AND ASCII VALUE ( IF PRINTABLE)\
0C82  
0C8A \ SEE IF EOL\
0C8E \ IF NOT DONE WITH IT ALL - STILL CONTINUE\
1786 \ PRINT ASCII VALUE OF LOCATION IF MAKES SENSE - ELSE PERIOD\
178E  
1790  
0C92 \ FETCH NEW STARTING ADDRESS\
0C95 \ IF > THAN EXPECTED END OF DISPLAY - EXIT TO COMMAND\
0C2B \ DUMP MORE LOCATIONS\
0C2E \ IF CHAR PRESSED - ABORT DUMP\
0C06  
0C0B  
0C0E  
0C13  
0C1C  
0C28  
0C5E  
0C5B \ SEE IF MORE WORDS TO DUMP\
0C4A  
0E92 \ INPUT INTO BUFFER - IF DASH, BAD COMMAND\
0E99 \ MOVE REMAINDER OF LINE INTO BUFF\
0EA4  
0E9F \ MOVE SIZE OF COMMAND FIRST\
0E57 \ GET ANY PENDING CHAR IN B FIRST - ELSE GET NEXT IN BUFFER\
0E55 \ GET CHAR - WIPEOUT ANY PENDING CHAR IN B\
16F8 \ SEE IF UPPER CASE ALREADY\
16FE \ GET NEXT CHAR FROM BUFFER\
0EAE \ PUT ZERO AT END\
0E62 \ SET Z FLAG IF CR, ASTERICK, OR SPACE\
0E5F \ SET Z FLAG IF PERIOD OR ...\
CHAR FROM BUFFER\
0EAE \